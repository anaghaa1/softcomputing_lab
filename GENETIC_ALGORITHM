import random

def fitness_function(x):
    return x ** 2 

def binary_to_decimal(binary_str):
    return int(binary_str, 2)


def decimal_to_binary(decimal, length):
    return format(decimal, f"0{length}b")


def generate_population(pop_size, bit_length):
    population = []
    for _ in range(pop_size):
        individual = ''.join(random.choice('01') for _ in range(bit_length))
        population.append(individual)
    return population
def selection(population, fitness_values):
    selected = random.choices(population, weights=fitness_values, k=2)
    return selected

def crossover(parent1, parent2):
    crossover_point = random.randint(1, len(parent1) - 1)  # Random crossover point
    offspring1 = parent1[:crossover_point] + parent2[crossover_point:]
    offspring2 = parent2[:crossover_point] + parent1[crossover_point:]
    return offspring1, offspring2

def mutation(individual, mutation_rate):
    individual_list = list(individual)
    for i in range(len(individual_list)):
        if random.random() < mutation_rate:
            individual_list[i] = '1' if individual_list[i] == '0' else '0'
    return ''.join(individual_list)

def genetic_algorithm(pop_size, bit_length, generations, mutation_rate):
    # Initialize population
    population = generate_population(pop_size, bit_length)

  
    for generation in range(generations):
        print(f"Generation {generation + 1}:")
        
        
        fitness_values = [fitness_function(binary_to_decimal(individual)) for individual in population]

       
        best_individual = population[fitness_values.index(max(fitness_values))]
        best_fitness = max(fitness_values)
        print(f"Best individual: {best_individual} | Fitness: {best_fitness}")
        
      
        new_population = []
        for _ in range(pop_size // 2):  # Create pairs of parents
            parent1, parent2 = selection(population, fitness_values)
            offspring1, offspring2 = crossover(parent1, parent2)
            new_population.extend([mutation(offspring1, mutation_rate), mutation(offspring2, mutation_rate)])

        population = new_population  # Update the population with new offspring

  
    fitness_values = [fitness_function(binary_to_decimal(individual)) for individual in population]
    best_individual = population[fitness_values.index(max(fitness_values))]
    best_fitness = max(fitness_values)

    return best_individual, best_fitness

population_size = 10  # Number of individuals in the population
bit_length = 5  # Number of bits in the binary string (represents numbers 0 to 31)
generations = 20  # Number of generations
mutation_rate = 0.05  # Mutation rate (probability of flipping a bit)

best_individual, best_fitness = genetic_algorithm(population_size, bit_length, generations, mutation_rate)
print("\nFinal Best Individual:", best_individual)
print("Fitness of Final Best Individual:", best_fitness)
