import numpy as np

def objective_function(x):
    
    return np.sum(x**2)

class ParticleSwarmOptimization:
    def __init__(self, num_particles, num_dimensions, max_iter, w, c1, c2):
        self.num_particles = num_particles  
        self.num_dimensions = num_dimensions
        self.max_iter = max_iter  
        self.w = w  
        self.c1 = c1 
        self.c2 = c2  
       
        self.positions = np.random.uniform(-10, 10, (self.num_particles, self.num_dimensions)) 
        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.num_dimensions))  
      
        self.best_positions = np.copy(self.positions)
        self.best_fitness = np.array([objective_function(p) for p in self.positions])

        self.global_best_position = self.best_positions[np.argmin(self.best_fitness)]
        self.global_best_fitness = np.min(self.best_fitness)

    def update_velocity(self, i):
        r1 = np.random.rand(self.num_dimensions)
        r2 = np.random.rand(self.num_dimensions)
        cognitive_velocity = self.c1 * r1 * (self.best_positions[i] - self.positions[i])
        social_velocity = self.c2 * r2 * (self.global_best_position - self.positions[i])
        new_velocity = self.w * self.velocities[i] + cognitive_velocity + social_velocity
        return new_velocity

    def optimize(self):
        for iteration in range(self.max_iter):
            for i in range(self.num_particles):
                self.velocities[i] = self.update_velocity(i)
                self.positions[i] += self.velocities[i]
                self.positions[i] = np.clip(self.positions[i], -10, 10)
                fitness = objective_function(self.positions[i])
                if fitness < self.best_fitness[i]:
                    self.best_fitness[i] = fitness
                    self.best_positions[i] = self.positions[i]
            best_particle_index = np.argmin(self.best_fitness)
            if self.best_fitness[best_particle_index] < self.global_best_fitness:
                self.global_best_fitness = self.best_fitness[best_particle_index]
                self.global_best_position = self.best_positions[best_particle_index]

            print(f"Iteration {iteration + 1}/{self.max_iter}, Best Fitness: {self.global_best_fitness}")

        return self.global_best_position, self.global_best_fitness


pso = ParticleSwarmOptimization(
    num_particles=30,
    num_dimensions=2,  
    max_iter=100,  
    w=0.7, 
    c1=1.5,  
    c2=1.5  
)

best_position, best_fitness = pso.optimize()
print(f"Optimal Solution: Position = {best_position}, Fitness = {best_fitness}")
